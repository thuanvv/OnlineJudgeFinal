(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{272:function(t,e,a){t.exports=a.p+"assets/img/lduoj-framework.a74f4634.jpg"},273:function(t,e,a){t.exports=a.p+"assets/img/git-repo.9c57d540.jpg"},274:function(t,e,a){t.exports=a.p+"assets/img/coding.f06b3a48.png"},303:function(t,e,a){"use strict";a.r(e);var r=a(14),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"开发手册"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发手册"}},[t._v("#")]),t._v(" 开发手册")]),t._v(" "),e("blockquote",[e("p",[t._v("说明：系统在开发初期并没有考虑过多的开发原则，没有实现前后端分离，没有遵循RESTful标准等。\n即日起，开发将尽最大可能地遵循"),e("a",{attrs:{href:"https://github.com/winterant/restful-api-specification",target:"_blank",rel:"noopener noreferrer"}},[t._v("前后端接口规范 - RESTful版"),e("OutboundLink")],1),t._v("。")])]),t._v(" "),e("h2",{attrs:{id:"生产环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#生产环境"}},[t._v("#")]),t._v(" 生产环境")]),t._v(" "),e("p",[e("img",{attrs:{src:a(272),alt:"framework"}})]),t._v(" "),e("p",[t._v("生产环境目前采用"),e("code",[t._v("docker-compose")]),t._v("编排方式部署，包含4个镜像，分别是")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("winterant/lduoj:1.2")]),t._v("; "),e("a",{attrs:{href:"https://github.com/winterant/OnlineJudge",target:"_blank",rel:"noopener noreferrer"}},[t._v("Web端"),e("OutboundLink")],1),t._v("，基于Ubuntu20.04镜像构建；暴露80端口；")]),t._v(" "),e("li",[e("code",[t._v("winterant/judge:1.2")]),t._v("; "),e("a",{attrs:{href:"https://github.com/winterant/judge",target:"_blank",rel:"noopener noreferrer"}},[t._v("判题端"),e("OutboundLink")],1),t._v("，基于Ubuntu20.04镜像构建；")]),t._v(" "),e("li",[e("code",[t._v("mysql:8.0")]),t._v("; 官方镜像；")]),t._v(" "),e("li",[e("code",[t._v("redis:7.0")]),t._v("; 官方镜像；")])]),t._v(" "),e("p",[t._v("编排启动的容器将以只读方式读取环境变量配置文件"),e("code",[t._v("lduoj.conf")]),t._v("（详情参考"),e("a",{attrs:{href:"https://github.com/winterant/OnlineJudge/tree/deploy",target:"_blank",rel:"noopener noreferrer"}},[t._v("deploy分支"),e("OutboundLink")],1),t._v("）。")]),t._v(" "),e("h2",{attrs:{id:"本地开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地开发"}},[t._v("#")]),t._v(" 本地开发")]),t._v(" "),e("blockquote",[e("p",[t._v("开发前，你需要对"),e("a",{attrs:{href:"https://learnku.com/docs/laravel/6.x",target:"_blank",rel:"noopener noreferrer"}},[t._v("Laravel框架"),e("OutboundLink")],1),t._v("有一些基本的了解。"),e("br"),t._v("\n本地开发最简单的方法是按照生产环境的部署方式部署到本地电脑，并将源码映射到宿主机，在本地打开源码目录进行开发即可。")])]),t._v(" "),e("h3",{attrs:{id:"_1-个人电脑需要安装的软件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-个人电脑需要安装的软件"}},[t._v("#")]),t._v(" 1. 个人电脑需要安装的软件")]),t._v(" "),e("h4",{attrs:{id:"代码编辑器或ide-二选一"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码编辑器或ide-二选一"}},[t._v("#")]),t._v(" 代码编辑器或IDE（二选一）")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://code.visualstudio.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("vscode"),e("OutboundLink")],1),t._v("（推荐）；"),e("br"),t._v("\nvscode是一个编辑器，你需要安装一些必备的插件才能进行开发：\n"),e("ul",[e("li",[t._v("Chinese (Simplified)(简体中文)（可选；汉化vscode主界面）")]),t._v(" "),e("li",[t._v("PHP Intelephense（必需；php语法提示工具）")]),t._v(" "),e("li",[t._v("Laravel Blade Snippets（必需；前端模板提示工具）")]),t._v(" "),e("li",[t._v("Laravel Blade formatter（必需；前端模板格式化工具）")]),t._v(" "),e("li",[t._v("Git History（可选；可视化查看文件修改历史）")])])]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.jetbrains.com/phpstorm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("PhpStorm"),e("OutboundLink")],1),t._v("；")])]),t._v(" "),e("h4",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" docker")]),t._v(" "),e("p",[t._v("不论你是用哪种操作系统，你需要安装对应平台的"),e("a",{attrs:{href:"https://www.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("docker"),e("OutboundLink")],1),t._v("。\n对于windows、macOS，docker桌面版安装好自带"),e("code",[t._v("docker-compose")]),t._v("，可以验证：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n")])])]),e("p",[t._v("如果执行失败，则需自行安装"),e("code",[t._v("docker-compose")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),e("p",[t._v("你必须安装"),e("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("git"),e("OutboundLink")],1),t._v("才能向远程仓库贡献代码。\n"),e("a",{attrs:{href:"https://blog.csdn.net/winter2121/article/details/124227331",target:"_blank",rel:"noopener noreferrer"}},[t._v("git基础操作笔记"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("p",[t._v("注意：现在github口令验证变严格了，从本地向远程仓库推送代码，只能通过ssh方式，所以你需要参考"),e("a",{attrs:{href:"https://blog.csdn.net/winter2121/article/details/124227331",target:"_blank",rel:"noopener noreferrer"}},[t._v("git基础操作笔记"),e("OutboundLink")],1),t._v("配置好github access ssh key。")]),t._v(" "),e("h3",{attrs:{id:"_2-将项目部署到本地"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-将项目部署到本地"}},[t._v("#")]),t._v(" 2. 将项目部署到本地")]),t._v(" "),e("ol",[e("li",[t._v("获取编排脚本和配置文件；")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-b")]),t._v(" deploy https://github.com/winterant/OnlineJudge.git\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" OnlineJudge\n")])])]),e("p",[t._v("PS:也可以自己从网页下载。")]),t._v(" "),e("p",[t._v("下文所有开发操作都将发生在文件夹"),e("code",[t._v("OnlineJudge")]),t._v("内，所以建议你把它放在一个你熟悉的位置（Windows用户不要放在C盘）。")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("修改"),e("code",[t._v("docker-compose.yml")]),t._v("，配置源码挂载到本地；")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# reduced code...\n\nservices:\n  web:\n    # reduced code...\n    volumes:\n      - ./data/web:/app  # 取消原挂载路径，改为此挂载路径\n\n# reduced code...\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("启动容器；")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker-compose")]),t._v(" up "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-d")]),t._v("\n")])])]),e("p",[t._v("注意命令要在宿主机文件夹"),e("code",[t._v("OnlineJudge")]),t._v("下执行。稍等几分钟，docker会自动下载好镜像并启动容器。")]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("打开浏览器访问"),e("a",{attrs:{href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://localhost:8080"),e("OutboundLink")],1),t._v("，成功显示首页则代表部署成功。")])]),t._v(" "),e("h3",{attrs:{id:"_3-开始开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-开始开发"}},[t._v("#")]),t._v(" 3. 开始开发")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("使用vscode打开文件夹"),e("code",[t._v("OnlineJudge/data/web/")]),t._v("，即可看到Web端源码。")])]),t._v(" "),e("li",[e("p",[t._v("配置git仓库；")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 初始化仓库")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" origin git@github.com:winterant/OnlineJudge.git  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加原始远程仓库，用于pull获取最新代码")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" forked git@github.com:"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("GithubUser"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("/OnlineJudge.git  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加个人远程仓库，用于push改动的代码")]),t._v("\n")])])]),e("p",[t._v("说明：上述命令配置了两个远程仓库，"),e("code",[t._v("origin")]),t._v("是原始仓库，仅"),e("a",{attrs:{href:"https://github.com/winterant",target:"_blank",rel:"noopener noreferrer"}},[t._v("winterant"),e("OutboundLink")],1),t._v("拥有推送权限；"),e("code",[t._v("forked")]),t._v("是你自己的仓库，这个仓库应当是你fork自原始仓库。\n"),e("code",[t._v("origin")]),t._v("、"),e("code",[t._v("forked")]),t._v("仅仅是在本地的别名，你可以随便起名字，远程仓库不会得知它们。")]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:a(273),width:"500"}})]),t._v(" "),e("blockquote",[e("p",[t._v("然而，如果"),e("a",{attrs:{href:"https://github.com/winterant",target:"_blank",rel:"noopener noreferrer"}},[t._v("winterant"),e("OutboundLink")],1),t._v("给你了原始仓库的推送权限，那么你无需fork原始仓库，只配置一个原始仓库就可以了。")])])]),t._v(" "),e("li",[e("p",[t._v("拉取最新代码；")])])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("origin/master master  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置本地分支master的获取源, 注意本地分支名也可能是main")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将从远程仓库origin/master获取最新代码")]),t._v("\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[e("strong",[t._v("开始愉快地开发吧！")])])]),t._v(" "),e("div",{attrs:{align:"center"}},[e("img",{attrs:{src:a(274),width:"400"}})]),t._v(" "),e("p",[t._v("需要注意的问题：")]),t._v(" "),e("ul",[e("li",[t._v("修改配置类文件后，需要进入容器内执行"),e("code",[t._v("php artisan opimize")]),t._v("使配置重新被加载才能生效；")])]),t._v(" "),e("ol",[e("li",[t._v("开发完某个功能后，你需要提交(commit)你的代码（注意这不代表提交到远程仓库，仅仅是提交到本地仓库）；\n你可以使用vscode自带的代码管理器来提交，也可以使用以下命令进行提交：")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# .代表当前项目目录全部添加到暂存区等候提交，你也可以替换成你希望提交的那部分文件")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"committing information."')]),t._v("\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[t._v("向远程仓库推送代码；将本地的改动推送到你的远程仓库：")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream forked master\n")])])]),e("p",[t._v("然后在你的远程仓库中，向原始仓库发起Pull Request，并联系"),e("a",{attrs:{href:"https://github.com/winterant",target:"_blank",rel:"noopener noreferrer"}},[t._v("winterant"),e("OutboundLink")],1),t._v("审阅、合并代码。")]),t._v(" "),e("blockquote",[e("p",[t._v("然而，如果你拥有原始仓库的推送权限，那么你无需fork原始仓库，而是直接向原始仓库推送代码：")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin master\n")])])])])])}),[],!1,null,null,null);e.default=s.exports}}]);